# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyck', [dirname(__file__)])
        except ImportError:
            import _pyck
            return _pyck
        if fp is not None:
            try:
                _mod = imp.load_module('_pyck', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyck = swig_import_helper()
    del swig_import_helper
else:
    import _pyck
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyck.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyck.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyck.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyck.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyck.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyck.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyck.SwigPyIterator_copy(self)
    def next(self): return _pyck.SwigPyIterator_next(self)
    def __next__(self): return _pyck.SwigPyIterator___next__(self)
    def previous(self): return _pyck.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyck.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyck.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyck.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyck.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyck.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyck.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyck.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyck.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyck.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyck.vectord___nonzero__(self)
    def __bool__(self): return _pyck.vectord___bool__(self)
    def __len__(self): return _pyck.vectord___len__(self)
    def pop(self): return _pyck.vectord_pop(self)
    def __getslice__(self, *args): return _pyck.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _pyck.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _pyck.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _pyck.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _pyck.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _pyck.vectord___setitem__(self, *args)
    def append(self, *args): return _pyck.vectord_append(self, *args)
    def empty(self): return _pyck.vectord_empty(self)
    def size(self): return _pyck.vectord_size(self)
    def clear(self): return _pyck.vectord_clear(self)
    def swap(self, *args):
        """void swap(double &x, double &y) """
        return _pyck.vectord_swap(self, *args)

    def get_allocator(self): return _pyck.vectord_get_allocator(self)
    def begin(self): return _pyck.vectord_begin(self)
    def end(self): return _pyck.vectord_end(self)
    def rbegin(self): return _pyck.vectord_rbegin(self)
    def rend(self): return _pyck.vectord_rend(self)
    def pop_back(self): return _pyck.vectord_pop_back(self)
    def erase(self, *args): return _pyck.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _pyck.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyck.vectord_push_back(self, *args)
    def front(self): return _pyck.vectord_front(self)
    def back(self): return _pyck.vectord_back(self)
    def assign(self, *args): return _pyck.vectord_assign(self, *args)
    def resize(self, *args): return _pyck.vectord_resize(self, *args)
    def insert(self, *args): return _pyck.vectord_insert(self, *args)
    def reserve(self, *args): return _pyck.vectord_reserve(self, *args)
    def capacity(self): return _pyck.vectord_capacity(self)
    __swig_destroy__ = _pyck.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _pyck.vectord_swigregister
vectord_swigregister(vectord)

class vectordd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectordd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectordd, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyck.vectordd_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyck.vectordd___nonzero__(self)
    def __bool__(self): return _pyck.vectordd___bool__(self)
    def __len__(self): return _pyck.vectordd___len__(self)
    def pop(self): return _pyck.vectordd_pop(self)
    def __getslice__(self, *args): return _pyck.vectordd___getslice__(self, *args)
    def __setslice__(self, *args): return _pyck.vectordd___setslice__(self, *args)
    def __delslice__(self, *args): return _pyck.vectordd___delslice__(self, *args)
    def __delitem__(self, *args): return _pyck.vectordd___delitem__(self, *args)
    def __getitem__(self, *args): return _pyck.vectordd___getitem__(self, *args)
    def __setitem__(self, *args): return _pyck.vectordd___setitem__(self, *args)
    def append(self, *args): return _pyck.vectordd_append(self, *args)
    def empty(self): return _pyck.vectordd_empty(self)
    def size(self): return _pyck.vectordd_size(self)
    def clear(self): return _pyck.vectordd_clear(self)
    def swap(self, *args):
        """void swap(double &x, double &y) """
        return _pyck.vectordd_swap(self, *args)

    def get_allocator(self): return _pyck.vectordd_get_allocator(self)
    def begin(self): return _pyck.vectordd_begin(self)
    def end(self): return _pyck.vectordd_end(self)
    def rbegin(self): return _pyck.vectordd_rbegin(self)
    def rend(self): return _pyck.vectordd_rend(self)
    def pop_back(self): return _pyck.vectordd_pop_back(self)
    def erase(self, *args): return _pyck.vectordd_erase(self, *args)
    def __init__(self, *args): 
        this = _pyck.new_vectordd(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyck.vectordd_push_back(self, *args)
    def front(self): return _pyck.vectordd_front(self)
    def back(self): return _pyck.vectordd_back(self)
    def assign(self, *args): return _pyck.vectordd_assign(self, *args)
    def resize(self, *args): return _pyck.vectordd_resize(self, *args)
    def insert(self, *args): return _pyck.vectordd_insert(self, *args)
    def reserve(self, *args): return _pyck.vectordd_reserve(self, *args)
    def capacity(self): return _pyck.vectordd_capacity(self)
    __swig_destroy__ = _pyck.delete_vectordd
    __del__ = lambda self : None;
vectordd_swigregister = _pyck.vectordd_swigregister
vectordd_swigregister(vectordd)

class CylindricalPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylindricalPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CylindricalPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        CylindricalPacker::CylindricalPacker(double *c, double r, double
        ratioY, double ratioZ, double h, int state, double num_div=3.0)

        3D Circular constructor.

        Parameters:
        -----------

        c:  Array of 3 doubles (x y z) representing the center of the
        ellipsoidal packing

        r:  Double representing the radius of the ellipse along X

        ratioY:  Double representing the ratio of the ellipse so that the
        radius along Y is equal to r*ratioY

        ratioZ:  Double representing the ratio of the ellipse so that the
        radius along Z is equal to r*ratioZ

        h:  Double representing the spacing between created particles

        state:  Integer representing the state of the created particles

        num_div:  Double indicating in how many parts the half-circle is
        divided (default 3) 
        """
        this = _pyck.new_CylindricalPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddShape(self, *args): return _pyck.CylindricalPacker_AddShape(self, *args)
    def Process(self):
        """
        void
        CylindricalPacker::Process()

        Pack all added shapes and generate positions and states 
        """
        return _pyck.CylindricalPacker_Process(self)

    def updateStates(self, *args):
        """
        void
        CylindricalPacker::updateStates(double *c, double r, double ratioY,
        double ratioZ, int state)

        3D Method to update the state of the particles outside a certain
        radius.

        Parameters:
        -----------

        c:  Array of 3 doubles (x y z) representing the center of the circular
        packing

        r0:  Double representing the radius of the ellipse along X

        h:  Double representing the spacing between created particles

        r:  Double representing the radius from which particles have their
        state updated

        ratioY:  Double representing the ratio of the ellipse so that the
        radius along Y is equal to r*ratioY

        ratioZ:  Double representing the ratio of the ellipse so that the
        radius along Z is equal to r*ratioZ

        state:  Integer representing the state of the created particles 
        """
        return _pyck.CylindricalPacker_updateStates(self, *args)

    def getPositions(self):
        """
        double *
        CylindricalPacker::getPositions()

        Get positions array 
        """
        return _pyck.CylindricalPacker_getPositions(self)

    def getStates(self):
        """
        int *
        CylindricalPacker::getStates()

        Get states array 
        """
        return _pyck.CylindricalPacker_getStates(self)

    def GetNumParticles(self): return _pyck.CylindricalPacker_GetNumParticles(self)
    def GetNumParticlesByState(self, *args): return _pyck.CylindricalPacker_GetNumParticlesByState(self, *args)
    def getDim(self):
        """
        int
        CylindricalPacker::getDim()

        Get dimension value 
        """
        return _pyck.CylindricalPacker_getDim(self)

    __swig_destroy__ = _pyck.delete_CylindricalPacker
    __del__ = lambda self : None;
CylindricalPacker_swigregister = _pyck.CylindricalPacker_swigregister
CylindricalPacker_swigregister(CylindricalPacker)

class EllipsoidalPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidalPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidalPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        EllipsoidalPacker::EllipsoidalPacker(double h, int state, double *c,
        double r, double ratio) 
        """
        this = _pyck.new_EllipsoidalPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddShape(self, *args): return _pyck.EllipsoidalPacker_AddShape(self, *args)
    def Process(self):
        """
        void
        EllipsoidalPacker::Process()

        Pack all added shapes and generate positions and states 
        """
        return _pyck.EllipsoidalPacker_Process(self)

    def updateStates(self, *args):
        """
        void
        EllipsoidalPacker::updateStates(double *c, double r0, double h, double
        r, double ratioY, double ratioZ, int state)

        3D Method to update the state of the particles outside a certain
        radius.

        Parameters:
        -----------

        c:  Array of 3 doubles (x y z) representing the center of the
        ellipsoidal packing

        r0:  Double representing the radius of the ellipse along X

        h:  Double representing the spacing between created particles

        r:  Double representing the radius from which particles have their
        state updated

        ratioY:  Double representing the ratio of the ellipse so that the
        radius along Y is equal to r*ratioY

        ratioZ:  Double representing the ratio of the ellipse so that the
        radius along Z is equal to r*ratioZ

        state:  Integer representing the state of the created particles 
        """
        return _pyck.EllipsoidalPacker_updateStates(self, *args)

    def getPositions(self):
        """
        double*
        EllipsoidalPacker::getPositions() 
        """
        return _pyck.EllipsoidalPacker_getPositions(self)

    def getStates(self):
        """
        int*
        EllipsoidalPacker::getStates() 
        """
        return _pyck.EllipsoidalPacker_getStates(self)

    def GetNumParticles(self): return _pyck.EllipsoidalPacker_GetNumParticles(self)
    def GetNumParticlesByState(self, *args): return _pyck.EllipsoidalPacker_GetNumParticlesByState(self, *args)
    def getDim(self):
        """
        int
        EllipsoidalPacker::getDim() 
        """
        return _pyck.EllipsoidalPacker_getDim(self)

    __swig_destroy__ = _pyck.delete_EllipsoidalPacker
    __del__ = lambda self : None;
EllipsoidalPacker_swigregister = _pyck.EllipsoidalPacker_swigregister
EllipsoidalPacker_swigregister(EllipsoidalPacker)

class StructuredPack(_object):
    """
    The StructuredPack to be StructuredPacked with particles.

    C++ includes: structuredPack.h 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructuredPack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructuredPack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        StructuredPack::StructuredPack(Packer *packer)

        StructuredPack Constructor

        Parameters:
        -----------

        StructuredPacker:  Determines the relationship between IJK and
        Cartesian coordinates. 
        """
        this = _pyck.new_StructuredPack(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddShape(self, *args): return _pyck.StructuredPack_AddShape(self, *args)
    def Process(self):
        """
        void
        StructuredPack::Process()

        StructuredPack all added shapes and generate positions and states 
        """
        return _pyck.StructuredPack_Process(self)

    def GetNumParticles(self): return _pyck.StructuredPack_GetNumParticles(self)
    def GetPositions(self): return _pyck.StructuredPack_GetPositions(self)
    def GetNumParticlesByState(self, *args): return _pyck.StructuredPack_GetNumParticlesByState(self, *args)
    def GetClosestParticlePosition(self, *args):
        """
        std::vector< double >
        StructuredPack::GetClosestParticlePosition(double *pos)

        Get the position of the closest valid particle to the input coordinate

        Parameters:
        -----------

        pos:  Input coordinate

        The coordinates of the closest valid particle 
        """
        return _pyck.StructuredPack_GetClosestParticlePosition(self, *args)

    __swig_destroy__ = _pyck.delete_StructuredPack
    __del__ = lambda self : None;
StructuredPack_swigregister = _pyck.StructuredPack_swigregister
StructuredPack_swigregister(StructuredPack)

class CubicPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubicPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        CubicPacker::CubicPacker(double *doubleLenIn, double h)

        CubicPacker constructor.

        Parameters:
        -----------

        doubleLenIn:  Size of the domain in Cartesian coordinate system

        h:  Minimum particle separation 
        """
        this = _pyck.new_CubicPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetPeriodicExtent(self):
        """
        std::vector<
        double > CubicPacker::GetPeriodicExtent()

        Get a domain extent which represents a periodic domain. For a domain
        boundary to be periodic, particles must be packed all the way to the
        boundary. Periodic domain extent 
        """
        return _pyck.CubicPacker_GetPeriodicExtent(self)

    def GetParticleVolume(self): return _pyck.CubicPacker_GetParticleVolume(self)
    __swig_destroy__ = _pyck.delete_CubicPacker
    __del__ = lambda self : None;
CubicPacker_swigregister = _pyck.CubicPacker_swigregister
CubicPacker_swigregister(CubicPacker)

class FccPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FccPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FccPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FccPacker::FccPacker(double *doubleLenIn, double h)

        FccPacker constructor.

        Parameters:
        -----------

        doubleLenIn:  Size of the domain in Cartesian coordinate system

        h:  Minimum particle separation 
        """
        this = _pyck.new_FccPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetPeriodicExtent(self):
        """
        std::vector<
        double > FccPacker::GetPeriodicExtent()

        Get a domain extent which represents a periodic domain. For a domain
        boundary to be periodic, particles must be packed all the way to the
        boundary. Periodic domain extent 
        """
        return _pyck.FccPacker_GetPeriodicExtent(self)

    def GetParticleVolume(self): return _pyck.FccPacker_GetParticleVolume(self)
    __swig_destroy__ = _pyck.delete_FccPacker
    __del__ = lambda self : None;
FccPacker_swigregister = _pyck.FccPacker_swigregister
FccPacker_swigregister(FccPacker)

class BccPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BccPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BccPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        BccPacker::BccPacker(double *doubleLenIn, double h)

        BccPacker constructor.

        Parameters:
        -----------

        doubleLenIn:  Size of the domain in Cartesian coordinate system

        h:  Minimum particle separation 
        """
        this = _pyck.new_BccPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetPeriodicExtent(self):
        """
        std::vector<
        double > BccPacker::GetPeriodicExtent()

        Get a domain extent which represents a periodic domain. For a domain
        boundary to be periodic, particles must be packed all the way to the
        boundary. Periodic domain extent 
        """
        return _pyck.BccPacker_GetPeriodicExtent(self)

    def GetParticleVolume(self): return _pyck.BccPacker_GetParticleVolume(self)
    __swig_destroy__ = _pyck.delete_BccPacker
    __del__ = lambda self : None;
BccPacker_swigregister = _pyck.BccPacker_swigregister
BccPacker_swigregister(BccPacker)

class HcpPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HcpPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HcpPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        HcpPacker::HcpPacker(double *doubleLenIn, double h, bool
        rotate90=false)

        HcpPacker constructor.

        Parameters:
        -----------

        doubleLenIn:  Size of the domain in Cartesian coordinate system

        h:  Minimum particle separation 
        """
        this = _pyck.new_HcpPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetPeriodicExtent(self):
        """
        std::vector<
        double > HcpPacker::GetPeriodicExtent()

        Get a domain extent which represents a periodic domain. For a domain
        boundary to be periodic, particles must be packed all the way to the
        boundary. Periodic domain extent 
        """
        return _pyck.HcpPacker_GetPeriodicExtent(self)

    def GetParticleVolume(self): return _pyck.HcpPacker_GetParticleVolume(self)
    __swig_destroy__ = _pyck.delete_HcpPacker
    __del__ = lambda self : None;
HcpPacker_swigregister = _pyck.HcpPacker_swigregister
HcpPacker_swigregister(HcpPacker)

class Hcp2dPacker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hcp2dPacker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hcp2dPacker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Hcp2dPacker::Hcp2dPacker(double *doubleLenIn, double h, bool
        rotate90=false)

        Hcp2dPacker constructor.

        Parameters:
        -----------

        doubleLenIn:  Size of the domain in Cartesian coordinate system

        h:  Minimum particle separation 
        """
        this = _pyck.new_Hcp2dPacker(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetPeriodicExtent(self):
        """
        std::vector<
        double > Hcp2dPacker::GetPeriodicExtent()

        Get a domain extent which represents a periodic domain. For a domain
        boundary to be periodic, particles must be packed all the way to the
        boundary. Periodic domain extent 
        """
        return _pyck.Hcp2dPacker_GetPeriodicExtent(self)

    def GetParticleVolume(self): return _pyck.Hcp2dPacker_GetParticleVolume(self)
    __swig_destroy__ = _pyck.delete_Hcp2dPacker
    __del__ = lambda self : None;
Hcp2dPacker_swigregister = _pyck.Hcp2dPacker_swigregister
Hcp2dPacker_swigregister(Hcp2dPacker)

class Cuboid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cuboid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cuboid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Cuboid::Cuboid(int state,
        double *p1, double *p2)

        Cuboid constructor

        Parameters:
        -----------

        state:  State to be applied to particles within this shape. state = 0
        will remove particle from output

        p1:  Lower-left corner of cuboid in cartesian coordinates

        p2:  Upper-right corner of cuboid in cartesian coordinates 
        """
        this = _pyck.new_Cuboid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_Cuboid
    __del__ = lambda self : None;
Cuboid_swigregister = _pyck.Cuboid_swigregister
Cuboid_swigregister(Cuboid)

class Cylinder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Cylinder::Cylinder(int
        state, double *c, double r, double *l)

        Cylinder constructor

        Parameters:
        -----------

        state:  State to be applied to particles within this shape. state = 0
        will remove particle from output

        c:  Center of the cylinder in cartesian coordinates

        r:  Radius of the cylinder

        l:  Length of the cylinder in cartesian coordinates, (0,0,l) or
        (0,l,0) or (l,0,0) indicates the direction

        domain:  Domain in which this shape will be mapped 
        """
        this = _pyck.new_Cylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_Cylinder
    __del__ = lambda self : None;
Cylinder_swigregister = _pyck.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class Sphere(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Sphere::Sphere(int state,
        double *c, double r)

        Sphere constructor

        Parameters:
        -----------

        state:  State to be applied to particles within this shape. state = 0
        will remove particle from output

        c:  Center of the sphere in cartesian coordinates

        r:  Radius of the sphere 
        """
        this = _pyck.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_Sphere
    __del__ = lambda self : None;
Sphere_swigregister = _pyck.Sphere_swigregister
Sphere_swigregister(Sphere)

class TriPrism(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriPrism, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriPrism, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        TriPrism::TriPrism(int
        state, double *pt1, double *pt2, double *pt3, double l)

        Triangular Prism constructor    @param state State to be applied to
        particles within this shape. state = 0 will remove particle from
        output    @param pt1 first point to define tripism in cartesian
        coordinates    @param pt2 second point to define tripism in cartesian
        coordinates    @param pt3 third point to define tripism in cartesian
        coordinates    @param pt4 fourth point to define tripism in cartesian
        coordinates    @param l Length of the cylinder in cartesian
        coordinates, (0,0,l) or (0,l,0) or (l,0,0) indicates the direction pt1
        ______length_______

        pt3||||||||||||pt2_________|||||||||||| 
        """
        this = _pyck.new_TriPrism(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_TriPrism
    __del__ = lambda self : None;
TriPrism_swigregister = _pyck.TriPrism_swigregister
TriPrism_swigregister(TriPrism)

class StlShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StlShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StlShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        StlShape::StlShape(int
        state, std::string fname, double *translation=NULL, double scale=1.0,
        double *rot_axis=NULL, double rot_angle=0.0)

        StlShape constructor

        Parameters:
        -----------

        state:  State to be applied to particles within this shape. state = 0
        will remove particle from output

        fname:  STL filename

        translation:  (Optional) Array of length three representing a
        translation to be applied to the shape

        scale:  (Optional) Scaling factor to be applied to the STL geometry

        rot_axis:  (Optional) Array of length three representing the axis
        about which to rotate the STL Geometry

        rot_angle:  (Optional) Angle (in radians) by which the shape will be
        rotated about the rotation axis 
        """
        this = _pyck.new_StlShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_StlShape
    __del__ = lambda self : None;
StlShape_swigregister = _pyck.StlShape_swigregister
StlShape_swigregister(StlShape)

class PyShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        PyShape::PyShape(int state,
        double *p1, double *p2, PyObject *PyFunc)

        PyShape constructor

        Parameters:
        -----------

        state:  State to be applied to particles within this shape. state = 0
        will remove particle from output

        p1:  Lower-left corner of the shapes bounding box in cartesian
        coordinates

        p2:  Upper-right corner of the shapes bounding box in cartesian
        coordinates

        PyFunc:  Python callback defining the shape. Takes 3 arguments, x, y,
        and z, coordinates of a point. Returns true if a particle is inside
        the shape and false otherwsie 
        """
        this = _pyck.new_PyShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_PyShape
    __del__ = lambda self : None;
PyShape_swigregister = _pyck.PyShape_swigregister
PyShape_swigregister(PyShape)

class ShapeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyck.ShapeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyck.ShapeVector___nonzero__(self)
    def __bool__(self): return _pyck.ShapeVector___bool__(self)
    def __len__(self): return _pyck.ShapeVector___len__(self)
    def pop(self): return _pyck.ShapeVector_pop(self)
    def __getslice__(self, *args): return _pyck.ShapeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pyck.ShapeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pyck.ShapeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pyck.ShapeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pyck.ShapeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pyck.ShapeVector___setitem__(self, *args)
    def append(self, *args): return _pyck.ShapeVector_append(self, *args)
    def empty(self): return _pyck.ShapeVector_empty(self)
    def size(self): return _pyck.ShapeVector_size(self)
    def clear(self): return _pyck.ShapeVector_clear(self)
    def swap(self, *args):
        """void swap(double &x, double &y) """
        return _pyck.ShapeVector_swap(self, *args)

    def get_allocator(self): return _pyck.ShapeVector_get_allocator(self)
    def begin(self): return _pyck.ShapeVector_begin(self)
    def end(self): return _pyck.ShapeVector_end(self)
    def rbegin(self): return _pyck.ShapeVector_rbegin(self)
    def rend(self): return _pyck.ShapeVector_rend(self)
    def pop_back(self): return _pyck.ShapeVector_pop_back(self)
    def erase(self, *args): return _pyck.ShapeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pyck.new_ShapeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyck.ShapeVector_push_back(self, *args)
    def front(self): return _pyck.ShapeVector_front(self)
    def back(self): return _pyck.ShapeVector_back(self)
    def assign(self, *args): return _pyck.ShapeVector_assign(self, *args)
    def resize(self, *args): return _pyck.ShapeVector_resize(self, *args)
    def insert(self, *args): return _pyck.ShapeVector_insert(self, *args)
    def reserve(self, *args): return _pyck.ShapeVector_reserve(self, *args)
    def capacity(self): return _pyck.ShapeVector_capacity(self)
    __swig_destroy__ = _pyck.delete_ShapeVector
    __del__ = lambda self : None;
ShapeVector_swigregister = _pyck.ShapeVector_swigregister
ShapeVector_swigregister(ShapeVector)

class CompositeShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyck.new_CompositeShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_CompositeShape
    __del__ = lambda self : None;
CompositeShape_swigregister = _pyck.CompositeShape_swigregister
CompositeShape_swigregister(CompositeShape)

class ConvexHull2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHull2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHull2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyck.new_ConvexHull2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_ConvexHull2D
    __del__ = lambda self : None;
ConvexHull2D_swigregister = _pyck.ConvexHull2D_swigregister
ConvexHull2D_swigregister(ConvexHull2D)

class Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameters, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyck.Parameters_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyck.Parameters___nonzero__(self)
    def __bool__(self): return _pyck.Parameters___bool__(self)
    def __len__(self): return _pyck.Parameters___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyck.Parameters___getitem__(self, *args)
    def __delitem__(self, *args): return _pyck.Parameters___delitem__(self, *args)
    def has_key(self, *args): return _pyck.Parameters_has_key(self, *args)
    def keys(self): return _pyck.Parameters_keys(self)
    def values(self): return _pyck.Parameters_values(self)
    def items(self): return _pyck.Parameters_items(self)
    def __contains__(self, *args): return _pyck.Parameters___contains__(self, *args)
    def key_iterator(self): return _pyck.Parameters_key_iterator(self)
    def value_iterator(self): return _pyck.Parameters_value_iterator(self)
    def __setitem__(self, *args): return _pyck.Parameters___setitem__(self, *args)
    def asdict(self): return _pyck.Parameters_asdict(self)
    def __init__(self, *args): 
        this = _pyck.new_Parameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyck.Parameters_empty(self)
    def size(self): return _pyck.Parameters_size(self)
    def clear(self): return _pyck.Parameters_clear(self)
    def swap(self, *args):
        """void swap(double &x, double &y) """
        return _pyck.Parameters_swap(self, *args)

    def get_allocator(self): return _pyck.Parameters_get_allocator(self)
    def begin(self): return _pyck.Parameters_begin(self)
    def end(self): return _pyck.Parameters_end(self)
    def rbegin(self): return _pyck.Parameters_rbegin(self)
    def rend(self): return _pyck.Parameters_rend(self)
    def count(self, *args): return _pyck.Parameters_count(self, *args)
    def erase(self, *args): return _pyck.Parameters_erase(self, *args)
    def find(self, *args): return _pyck.Parameters_find(self, *args)
    def lower_bound(self, *args): return _pyck.Parameters_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyck.Parameters_upper_bound(self, *args)
    __swig_destroy__ = _pyck.delete_Parameters
    __del__ = lambda self : None;
Parameters_swigregister = _pyck.Parameters_swigregister
Parameters_swigregister(Parameters)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        Model::Model(double *positions,
        int *states, long numParticles, int dim)

        Model Constructor

        Parameters:
        -----------

        positions:  N x 3 array of positions, third dimension should be 0.0
        for 2d

        states:  N x 1 array of pack states

        numParticles:  Specifies N particles 
        """
        this = _pyck.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_Model
    __del__ = lambda self : None;
    def AddPack(self, *args):
        """
        void Model::AddPack(double
        *positions, int *states, long numParticles, int dim)

        Append particles to this model

        Parameters:
        -----------

        positions:  Nx3 array of positions (x1,y1,z1,x2,y2,z2,...,xn,yn,zn)

        states:  Length N integer array of states

        numParticles:  Number of particles to add

        dim:  Dimensionality of the pack 
        """
        return _pyck.Model_AddPack(self, *args)

    def CreateIntField(self, *args):
        """
        int
        Model::CreateIntField(std::string name, int dim)

        Create a dim dimensional field of integers

        Parameters:
        -----------

        name:  Name of the field

        dim:  dimensionality of the field

        A Handle to the field so that values may be set 
        """
        return _pyck.Model_CreateIntField(self, *args)

    def CreateDoubleField(self, *args):
        """
        int
        Model::CreateDoubleField(std::string name, int dim)

        Create a dim dimensional field of floats

        Parameters:
        -----------

        name:  Name of the field

        dim:  dimensionality of the field

        A Handle to the field so that values may be set 
        """
        return _pyck.Model_CreateDoubleField(self, *args)

    def SetIntField(self, *args):
        """
        void
        Model::SetIntField(int handle, int state, int *val)

        Set the values of an integer field

        Parameters:
        -----------

        handle:  Handle of the field to be set

        state:  particle state for which these values will be applioed

        val:  Array of length equal to the dimensionality of the field 
        """
        return _pyck.Model_SetIntField(self, *args)

    def SetIntFieldCallback(self, *args):
        """
        void
        Model::SetIntField(int handle, int state, int *val)

        Set the values of an integer field

        Parameters:
        -----------

        handle:  Handle of the field to be set

        state:  particle state for which these values will be applioed

        val:  Array of length equal to the dimensionality of the field 
        """
        return _pyck.Model_SetIntFieldCallback(self, *args)

    def GetIntField(self, *args): return _pyck.Model_GetIntField(self, *args)
    def SetDoubleField(self, *args):
        """
        void
        Model::SetDoubleField(int handle, int state, double *val)

        Set the values of an float field

        Parameters:
        -----------

        handle:  Handle of the field to be set

        state:  particle state for which these values will be applioed

        val:  Array of length equal to the dimensionality of the field 
        """
        return _pyck.Model_SetDoubleField(self, *args)

    def SetDoubleFieldCallback(self, *args):
        """
        void
        Model::SetDoubleField(int handle, int state, double *val)

        Set the values of an float field

        Parameters:
        -----------

        handle:  Handle of the field to be set

        state:  particle state for which these values will be applioed

        val:  Array of length equal to the dimensionality of the field 
        """
        return _pyck.Model_SetDoubleFieldCallback(self, *args)

    def GetDoubleField(self, *args): return _pyck.Model_GetDoubleField(self, *args)
    def SetParameter(self, *args):
        """
        void
        Model::SetParameter(std::string key, std::string value)

        Add a parameter to the domain

        Parameters:
        -----------

        key:  The label for this parameter

        value:  The value of this parameter 
        """
        return _pyck.Model_SetParameter(self, *args)

    def SetParameters(self, *args):
        """
        void
        Model::SetParameters(std::map< std::string, std::string > &parameters)

        Add a parameter to the domain

        Parameters:
        -----------

        parameters:  Map of parameters to add 
        """
        return _pyck.Model_SetParameters(self, *args)

    def ReadSingleIntegerParameter(self, *args): return _pyck.Model_ReadSingleIntegerParameter(self, *args)
    def ReadMultipleDoubleParameter(self, *args): return _pyck.Model_ReadMultipleDoubleParameter(self, *args)
    def Serialize(self, *args):
        """
        void
        Model::Serialize(std::string fname, Writer *writer)

        Write domain to CSV file

        Parameters:
        -----------

        fname:  Output filename 
        """
        return _pyck.Model_Serialize(self, *args)

Model_swigregister = _pyck.Model_swigregister
Model_swigregister(Model)

class SparkWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparkWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparkWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """SparkWriter::SparkWriter() """
        this = _pyck.new_SparkWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_SparkWriter
    __del__ = lambda self : None;
SparkWriter_swigregister = _pyck.SparkWriter_swigregister
SparkWriter_swigregister(SparkWriter)

class AsciiWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsciiWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsciiWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """AsciiWriter::AsciiWriter() """
        this = _pyck.new_AsciiWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_AsciiWriter
    __del__ = lambda self : None;
AsciiWriter_swigregister = _pyck.AsciiWriter_swigregister
AsciiWriter_swigregister(AsciiWriter)

class VerditeWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerditeWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VerditeWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyck.new_VerditeWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyck.delete_VerditeWriter
    __del__ = lambda self : None;
VerditeWriter_swigregister = _pyck.VerditeWriter_swigregister
VerditeWriter_swigregister(VerditeWriter)

# This file is compatible with both classic and new-style classes.


